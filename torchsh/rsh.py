"""Real spherical harmonics in Cartesian form for PyTorch.

This is an autogenerated file. See
https://github.com/cheind/torch-spherical-harmonics
for more information.
"""


import torch


def rsh_cart_2(xyz: torch.Tensor):
    """Computes all real spherical harmonics up to 2 degree.

    This is an autogenerated method. See
    https://github.com/cheind/torch-spherical-harmonics
    for more information.

    Params:
        xyz: (N,...,3) tensor of points on the unit sphere

    Returns:
        rsh: (N,...,K) real spherical harmonics projections of input.
    """

    x = xyz[..., 0]
    y = xyz[..., 1]
    z = xyz[..., 2]

    x2 = x**2
    y2 = y**2
    z2 = z**2
    xy = x * y
    xz = x * z
    yz = y * z

    return torch.stack(
        [
            xyz.new_tensor(0.282094791773878).expand(xyz.shape[:-1]),
            0.48860251190292 * y,
            0.48860251190292 * z,
            0.48860251190292 * x,
        ],
        -1,
    )


def rsh_cart_4(xyz: torch.Tensor):
    """Computes all real spherical harmonics up to 4 degree.

    This is an autogenerated method. See
    https://github.com/cheind/torch-spherical-harmonics
    for more information.

    Params:
        xyz: (N,...,3) tensor of points on the unit sphere

    Returns:
        rsh: (N,...,K) real spherical harmonics projections of input.
    """

    x = xyz[..., 0]
    y = xyz[..., 1]
    z = xyz[..., 2]

    x2 = x**2
    y2 = y**2
    z2 = z**2
    xy = x * y
    xz = x * z
    yz = y * z

    return torch.stack(
        [
            xyz.new_tensor(0.282094791773878).expand(xyz.shape[:-1]),
            0.48860251190292 * y,
            0.48860251190292 * z,
            0.48860251190292 * x,
            1.09254843059208 * xy,
            1.09254843059208 * yz,
            0.94617469575756 * z2 - 0.31539156525252,
            1.09254843059208 * xz,
            0.54627421529604 * x2 - 0.54627421529604 * y2,
            4.72034871941315 * y * (0.375 * x2 - 0.125 * y2),
            2.89061144264055 * xy * z,
            0.304697199642977 * y * (7.5 * z2 - 1.5),
            1.49270533036046 * z * (1.25 * z2 - 0.75),
            0.304697199642977 * x * (7.5 * z2 - 1.5),
            1.44530572132028 * z * (x2 - y2),
            4.72034871941315 * x * (0.125 * x2 - 0.375 * y2),
        ],
        -1,
    )


def rsh_cart_8(xyz: torch.Tensor):
    """Computes all real spherical harmonics up to 8 degree.

    This is an autogenerated method. See
    https://github.com/cheind/torch-spherical-harmonics
    for more information.

    Params:
        xyz: (N,...,3) tensor of points on the unit sphere

    Returns:
        rsh: (N,...,K) real spherical harmonics projections of input.
    """

    x = xyz[..., 0]
    y = xyz[..., 1]
    z = xyz[..., 2]

    x2 = x**2
    y2 = y**2
    z2 = z**2
    xy = x * y
    xz = x * z
    yz = y * z

    return torch.stack(
        [
            xyz.new_tensor(0.282094791773878).expand(xyz.shape[:-1]),
            0.48860251190292 * y,
            0.48860251190292 * z,
            0.48860251190292 * x,
            1.09254843059208 * xy,
            1.09254843059208 * yz,
            0.94617469575756 * z2 - 0.31539156525252,
            1.09254843059208 * xz,
            0.54627421529604 * x2 - 0.54627421529604 * y2,
            4.72034871941315 * y * (0.375 * x2 - 0.125 * y2),
            2.89061144264055 * xy * z,
            0.304697199642977 * y * (7.5 * z2 - 1.5),
            1.49270533036046 * z * (1.25 * z2 - 0.75),
            0.304697199642977 * x * (7.5 * z2 - 1.5),
            1.44530572132028 * z * (x2 - y2),
            4.72034871941315 * x * (0.125 * x2 - 0.375 * y2),
            2.5033429417967 * xy * (x2 - y2),
            1.77013076977993 * yz * (3.0 * x2 - y2),
            0.126156626101008 * xy * (52.5 * z2 - 7.5),
            0.0892062058076386 * yz * (52.5 * z2 - 22.5),
            3.70249414203215 * z2**2 - 3.17356640745613 * z2 + 0.317356640745613,
            0.0892062058076386 * xz * (52.5 * z2 - 22.5),
            0.063078313050504 * (x2 - y2) * (52.5 * z2 - 7.5),
            1.77013076977993 * xz * (x2 - 3.0 * y2),
            0.625835735449176 * x2**2
            - 3.75501441269506 * x2 * y2
            + 0.625835735449176 * y2**2,
            7.00140860629515
            * y
            * (0.46875 * x2**2 - 0.9375 * x2 * y2 + 0.09375 * y2**2),
            8.30264925952416 * xy * z * (x2 - y2),
            0.00931882475114763 * y * (3.0 * x2 - y2) * (472.5 * z2 - 52.5),
            0.0913054625709205 * xy * z * (157.5 * z2 - 52.5),
            0.241571547304372 * y * (39.375 * z2**2 - 26.25 * z2 + 1.875),
            1.87120515925478 * z * (3.9375 * z2**2 - 4.375 * z2 + 0.9375),
            0.241571547304372 * x * (39.375 * z2**2 - 26.25 * z2 + 1.875),
            0.0456527312854602 * z * (x2 - y2) * (157.5 * z2 - 52.5),
            0.00931882475114763 * x * (x2 - 3.0 * y2) * (472.5 * z2 - 52.5),
            2.07566231488104 * z * (x2**2 - 6.0 * x2 * y2 + y2**2),
            7.00140860629515
            * x
            * (0.09375 * x2**2 - 0.9375 * x2 * y2 + 0.46875 * y2**2),
            43.7237827322825
            * xy
            * (0.09375 * x2**2 - 0.3125 * x2 * y2 + 0.09375 * y2**2),
            2.36661916223175 * yz * (5.0 * x2**2 - 10.0 * x2 * y2 + y2**2),
            0.00427144889505798 * xy * (x2 - y2) * (5197.5 * z2 - 472.5),
            0.00584892228263444 * yz * (3.0 * x2 - y2) * (1732.5 * z2 - 472.5),
            0.0701870673916132 * xy * (433.125 * z2**2 - 236.25 * z2 + 13.125),
            0.221950995245231 * yz * (86.625 * z2**2 - 78.75 * z2 + 13.125),
            14.6844857238222 * z2**3
            - 20.024298714303 * z2**2
            + 6.67476623810098 * z2
            - 0.317846011338142,
            0.221950995245231 * xz * (86.625 * z2**2 - 78.75 * z2 + 13.125),
            0.0350935336958066 * (x2 - y2) * (433.125 * z2**2 - 236.25 * z2 + 13.125),
            0.00584892228263444 * xz * (x2 - 3.0 * y2) * (1732.5 * z2 - 472.5),
            0.0010678622237645
            * (5197.5 * z2 - 472.5)
            * (x2**2 - 6.0 * x2 * y2 + y2**2),
            2.36661916223175 * xz * (x2**2 - 10.0 * x2 * y2 + 5.0 * y2**2),
            0.683184105191914 * x2**3
            - 10.2477615778787 * x2**2 * y2
            + 10.2477615778787 * x2 * y2**2
            - 0.683184105191914 * y2**3,
            15.0861382938581
            * y
            * (
                0.328125 * x2**3
                - 1.640625 * x2**2 * y2
                + 0.984375 * x2 * y2**2
                - 0.046875 * y2**3
            ),
            5.2919213236038 * xy * z * (3.0 * x2**2 - 10.0 * x2 * y2 + 3.0 * y2**2),
            9.98394571852353e-5
            * y
            * (67567.5 * z2 - 5197.5)
            * (5.0 * x2**2 - 10.0 * x2 * y2 + y2**2),
            0.00239614697244565 * xy * z * (x2 - y2) * (22522.5 * z2 - 5197.5),
            0.00397356022507413
            * y
            * (3.0 * x2 - y2)
            * (5630.625 * z2**2 - 2598.75 * z2 + 118.125),
            0.0561946276120613 * xy * z * (1126.125 * z2**2 - 866.25 * z2 + 118.125),
            0.206472245902897
            * y
            * (187.6875 * z2**3 - 216.5625 * z2**2 + 59.0625 * z2 - 2.1875),
            2.18509686118416
            * z
            * (13.40625 * z2**3 - 21.65625 * z2**2 + 9.84375 * z2 - 1.09375),
            0.206472245902897
            * x
            * (187.6875 * z2**3 - 216.5625 * z2**2 + 59.0625 * z2 - 2.1875),
            0.0280973138060306
            * z
            * (x2 - y2)
            * (1126.125 * z2**2 - 866.25 * z2 + 118.125),
            0.00397356022507413
            * x
            * (x2 - 3.0 * y2)
            * (5630.625 * z2**2 - 2598.75 * z2 + 118.125),
            0.000599036743111412
            * z
            * (22522.5 * z2 - 5197.5)
            * (x2**2 - 6.0 * x2 * y2 + y2**2),
            9.98394571852353e-5
            * x
            * (67567.5 * z2 - 5197.5)
            * (x2**2 - 10.0 * x2 * y2 + 5.0 * y2**2),
            2.6459606618019
            * z
            * (x2**3 - 15.0 * x2**2 * y2 + 15.0 * x2 * y2**2 - y2**3),
            15.0861382938581
            * x
            * (
                0.046875 * x2**3
                - 0.984375 * x2**2 * y2
                + 1.640625 * x2 * y2**2
                - 0.328125 * y2**3
            ),
        ],
        -1,
    )
